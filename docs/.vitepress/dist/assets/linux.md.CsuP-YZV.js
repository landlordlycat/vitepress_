import{_ as s,E as l,c as t,m as e,a as i,J as p,a4 as h,o}from"./chunks/framework.CI8or701.js";const y=JSON.parse('{"title":"Linux","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"linux.md","filePath":"linux.md","lastUpdated":1713006432000}'),d={name:"linux.md"},n={id:"linux",tabindex:"-1"},c=e("a",{class:"header-anchor",href:"#linux","aria-label":'Permalink to "Linux <Badge type="tip" text="Linux" />"'},"​",-1),r=h(`<blockquote><p>只有一个根目录<code>/</code>,所有文件都在它下面</p></blockquote><h2 id="linux-的路径描述方式" tabindex="-1">linux 的路径描述方式 <a class="header-anchor" href="#linux-的路径描述方式" aria-label="Permalink to &quot;linux 的路径描述方式&quot;">​</a></h2><p>linux：<code>:/</code> /etc/</p><p>wubdiws：<code>:\\</code> #D:\\data\\</p><hr><h1 id="linux-命令入门" tabindex="-1">linux 命令入门 <a class="header-anchor" href="#linux-命令入门" aria-label="Permalink to &quot;linux 命令入门&quot;">​</a></h1><h2 id="命令基础" tabindex="-1">命令基础 <a class="header-anchor" href="#命令基础" aria-label="Permalink to &quot;命令基础&quot;">​</a></h2><blockquote><p>···</p></blockquote><p><code>command [-options] [parameter]</code></p><p>command:命令本身</p><p>options:命令的一些选项，可以通过选项控制行为细节</p><p>parameter：命令的参数</p><p>[]，表示可选的意思</p><p>例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>ls -l /home/itheima</span></span>
<span class="line"><span>cp -r test1 test2 cp是命令本身，-r是选项，test和test2是参数，意思是复制文件夹test1成为test2</span></span></code></pre></div><h2 id="命令入门" tabindex="-1">命令入门 <a class="header-anchor" href="#命令入门" aria-label="Permalink to &quot;命令入门&quot;">​</a></h2><p>ls：列出目录下的内容</p><p><code>ls [-a -l -h] [linux 路径]</code></p><ul><li>-a 选项，表示：all 的意思，全部的文件列出来</li><li>-l 以列表形式排列展示内容</li><li>-h 表示以易于阅读，格式化文件大小。必须跟 l 搭配使用</li></ul><p>语法种的选项是可以组合使用的</p><ul><li>ls -l -a</li><li>ls -la</li><li>ls -al</li></ul><h2 id="home-目录和工作目录" tabindex="-1">Home 目录和工作目录 <a class="header-anchor" href="#home-目录和工作目录" aria-label="Permalink to &quot;Home 目录和工作目录&quot;">​</a></h2><p>home 目录：每个 linux 操作用户在 linux 系统的个人账户目录。路径在：/home/用户名</p><ul><li>如，当前用户是 itheima。其 home 目录是：/home/itheima</li><li>windows 和 linux 系统，均设有用户的 home 目录</li></ul><hr><h2 id="目录切换相关命令-cd-pwd" tabindex="-1">目录切换相关命令（cd/pwd） <a class="header-anchor" href="#目录切换相关命令-cd-pwd" aria-label="Permalink to &quot;目录切换相关命令（cd/pwd）&quot;">​</a></h2><h3 id="cd-切换工作目录" tabindex="-1">cd 切换工作目录 <a class="header-anchor" href="#cd-切换工作目录" aria-label="Permalink to &quot;cd 切换工作目录&quot;">​</a></h3><p>==cd：change directory==</p><p>语法：<code>cd [linux路径]</code> 不写参数默认去 home 目录</p><p>~ 是 home 目录的意思。</p><ol><li>如果以超级用户 root 账号登陆：~ 是 /root 目录</li><li>如果以普通用户 name 登陆：~是 /home/name 目录</li></ol><hr><h3 id="pwd-查看当前工作目录" tabindex="-1">pwd 查看当前工作目录 <a class="header-anchor" href="#pwd-查看当前工作目录" aria-label="Permalink to &quot;pwd 查看当前工作目录&quot;">​</a></h3><p>==pwd：print work directory==</p><p>语法：<code>pwd</code></p><p>pwd 命令，无选项，无参数，直接输入</p><hr><h2 id="相对路径-绝对路径和特殊路径符" tabindex="-1">相对路径，绝对路径和特殊路径符 <a class="header-anchor" href="#相对路径-绝对路径和特殊路径符" aria-label="Permalink to &quot;相对路径，绝对路径和特殊路径符&quot;">​</a></h2><p>绝对路径：以根目录为起点，以<code>/</code>开头<code>cd /home/iteheima/Desktop</code></p><p>相对路径：以当前目录为起点，无需以<code>/</code>开头<code>cd Desktop</code></p><p>特殊路径符：</p><ul><li><code>.</code>表示当前目录，比如<code>cd ./desktop</code> 表示切换到当前目录下的<code>desktop</code>目录内和<code>cd desktop</code>效果一样</li><li><code>..</code>表示上一级目录，比如：<code>cd ..</code> 切换到上一级，<code>cd ../..</code> 切换上一级的上一级目录</li><li><code>~ </code>表示 home 目录，比如：<code>cd ~</code>切换到 home 目录或者<code>cd ~/desktop</code>, 切换到 home 内的 desktop 目录</li></ul><hr><h2 id="创建目录-mkdir" tabindex="-1">创建目录（mkdir） <a class="header-anchor" href="#创建目录-mkdir" aria-label="Permalink to &quot;创建目录（mkdir）&quot;">​</a></h2><p>==mkdir：make directory==</p><p>语法：mkdir [-p] linux 路径</p><ul><li>参数必填，需要创建的文件夹路径。</li><li>-p 选项可选，表示自动创建不存在的父目录，适用于多层级的目录</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/itcast/itheima/nice/666</span></span></code></pre></div><hr><h2 id="文件操作" tabindex="-1">文件操作 <a class="header-anchor" href="#文件操作" aria-label="Permalink to &quot;文件操作&quot;">​</a></h2><h3 id="touch-cat-more" tabindex="-1">touch，cat，more <a class="header-anchor" href="#touch-cat-more" aria-label="Permalink to &quot;touch，cat，more&quot;">​</a></h3><p>语法：touch linux 路径*</p><ul><li>touch 命令无选项，参数必填。</li></ul><p>用于创建文件</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">touch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.txt</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #在当前目录下创建名为test的文件</span></span></code></pre></div><ul><li>cat 命令 查看文件内容 语法：cat linux 路径</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.txt</span></span></code></pre></div><ul><li>more 命令跟 cat 差不多，只不过 more 支持翻页。内容过多的，可以一页页的展示，空格翻页，q 退出查看</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">more</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.txt</span></span></code></pre></div><h3 id="cp-mv-rm" tabindex="-1">cp，mv，rm <a class="header-anchor" href="#cp-mv-rm" aria-label="Permalink to &quot;cp，mv，rm&quot;">​</a></h3><p>cp 用于复制</p><p>语法：<code>cp [-r] 参数1 参数2</code></p><ul><li>-r 选项，用于复制文件夹使用，表示递归</li><li>参数 1，表示复制的文件或文件夹</li><li>参数 2，复制去的地方</li></ul><p>mv 用于移动</p><p>语法：<code>mv 参数1 参数2</code></p><ul><li>参数 1，表示移动的文件或文件夹</li><li>参数 2，表示要移动去的地方，如果目标不存在，则进行改名，确保目标存在。（有改名的效果）</li></ul><p>rm 用于删除</p><p>语法：<code>rm [-r -f]参数1，参数2.....参数N</code></p><ul><li>同 cp 命令一样，-r 表示 recursion 选项用于删除文件夹，递归</li><li>-f 表示 force。强制性的（不会弹出提示确认信息） <ul><li>普通用户删除内容不会弹出提示，只有 root 管理员用户删除内容会有提示</li><li>所以一般普通用户用不到<code>-f</code>的选项</li></ul></li><li>参数 1，参数 2.....参数 n，表示要删除的文件或文件夹路径，按照空格隔开。</li></ul><p>rm 命令支持通配符*，用来做模糊匹配</p><ul><li>符号*表示通配符。即匹配任意内容（包含空），</li><li>test*，表示匹配任何 test 开头的内容，</li><li>*test，表示匹配任何以 test 结尾的内容，</li><li>*test*，表示匹配任何包含 test 的内容</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span></span></code></pre></div><p>可以通过 <code>su - root</code>，输入密码切换为 root 用户。</p><p>通过 exit 命令，退回普通用户</p><hr><h2 id="查找命令" tabindex="-1">查找命令 <a class="header-anchor" href="#查找命令" aria-label="Permalink to &quot;查找命令&quot;">​</a></h2><p>which，find</p><p>which 命令可以查看 命令的程序文件所在位置，命令本体是二进制可执行程序，例：<code>which cd</code></p><hr><p>find 命令去可以搜索指定的文件，支持使用通配符</p><p>语法：<code>find 起始路径 -name &#39;搜索的文件名&#39;</code></p><p>按照文件大小查找：</p><p>语法：<code>find 起始路径 -size +|- n[kMG]</code></p><ul><li>+,-表示大于和小于</li><li>n 代表大小数字</li><li>kmg 表示单位，k（小写）表示 kb，M 表示 mb，G 表示 gb</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -size</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -10m</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #查找小于10mb的文件</span></span></code></pre></div><hr><h2 id="grep" tabindex="-1">grep,wc 和管道符 <a class="header-anchor" href="#grep" aria-label="Permalink to &quot;grep,wc 和管道符 {#grep}&quot;">​</a></h2><p>grep 命令，从文件中通过关键字过滤文件行 语法：<code>grep [-n] &#39;搜索的内容&#39; 文件路径</code></p><ul><li>-n 选项，表示显示行号</li><li>搜索的内容，表示要搜索的内容</li><li>文件路径，表示要搜索的文件路径</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;hello&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.txt</span></span></code></pre></div><p>wc 命令，用于统计文件内容 语法：<code>wc [-c -m -l -w] 文件路径</code></p><ul><li>-c 选项，表示 bytes 数</li><li>-m 选项，表示统计字符数</li><li>-l 选项，表示统计行数</li><li>-w 选项，表示统计单词数</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.txt</span></span></code></pre></div><p>管道符：<code>|</code></p><p>管道符，表示将前一个命令的结果，作为后一个命令的输入</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;hello&#39;</span></span></code></pre></div><hr>`,97);function k(u,m,g,b,F,C){const a=l("Badge");return o(),t("div",null,[e("h1",n,[i("Linux "),p(a,{type:"tip",text:"Linux"}),i(),c]),r])}const x=s(d,[["render",k]]);export{y as __pageData,x as default};
